8a9
> from src.detector import DDEMC_para
11a13
> import src.basic_func as bf
45c47
<     # sheet.write(0, 9, "fitNum(MCMC_jump)")
---
>     sheet.write(0, 9, "fitNum(MCMC_jump)")
67c69
<         ini_xls_file(res_xls_name)
---
>         # ini_xls_file(res_xls_name)
71c73
<         def para_test_f(i):
---
>         for i in [10,11]:
76c78
<             if n_var==1:
---
>             if n_var == 1:
81,91c83,119
<             return testGSLfuncs(n_var, i-1, rf, pf, ipdm, fname)
<         # funcs_ids = [10,11,12,37,39]
<         # for i in [10]:
<         #     result = para_test_f(i)
<         #     add_to_excel(res_xls_name, result)
<         p = Pool(np.min([12, len(funcs_ids)]))
<         res_lst = []
<         for result in p.imap(para_test_f, funcs_ids):
<             res_lst.append(result)
<         for rsi in res_lst:
<             add_to_excel(res_xls_name, rsi)
---
>             def para_test_f(x):
>                 res = DDEMC_para(rf, pf, x, ipdm, fname, 360000, n_var)
>                 return res
>             iter_num = range(10)
>             p = Pool(np.min([10, len(iter_num)]))
>             res_lst = []
>             for result in p.imap(para_test_f, iter_num):
>                 res_lst.append(result)
>             temp_lst = res_lst
>             res_lst.sort()
>             res_lst.reverse()
>             # print res_lst
>             # [final_max, final_x, final_bound, final_time, count, final_count1, final_count2, distan_two_search_x_final]
>             # [temp_max, temp_x, bound, t2, count1, count2, rand_seed, count, t2 - t1, distan_two_search_x]
>             final_time = 0.0
>             final_count1 = 0
>             final_count2 = 0
>             for rs in res_lst:
>                 final_time = final_time+rs[3]
>                 final_count1 = final_count1 + rs[4]
>                 final_count2 = final_count2 + rs[5]
>             file_name = "../experiments/detecting_results/DDEMC"+str(n_var)+ "v/" + fname
>             print temp_lst
>             print res_lst
>             count = len(iter_num)
>             temp_res = res_lst[0][0:3]
>             temp_res.append(final_time)
>             temp_res.append(count)
>             temp_res.append(final_count1)
>             temp_res.append(final_count2)
>             temp_res.append(res_lst[0][-1])
>             temp_res.append(i-1)
>             temp_res.append(fname)
>             add_to_excel(res_xls_name, temp_res)
>             temp_lst.sort(key=lambda temp_lst: temp_lst[7])
>             bf.output_err(temp_lst, file_name, fname)
> 
