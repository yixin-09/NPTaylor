(FPCore (x y z)
:name "gsl_sf_airy_Ai_deriv"
:pre (and (and (<= -.464831530766350e1 x) (<= x -.464815984837865e1)) (and (<= 4.64815984837865e1 y) (<= y 4.64831530766350e1)) (and (<= 1.12434324840067e-3 z) (<= z 1.12434339409144e-3)))
(cos (- 2.35619449019234e0 (* (* x (sqrt y)) (- (+ -.427924620565467e-2 z) 6.25000000000000e-1)))))

(FPCore (x y z)
:name "gsl_sf_airy_Bi_deriv"
:pre (and (and (<= -.316307993711694e1 x) (<= x -.316297872548622e1)) (and (<= 3.16297872548622e1 y) (<= y 3.16307993711694e1)) (and (<= 1.12118695926311e-3 z) (<= z 1.12118740161280e-3)))
(sin (- 2.35619449019234e0 (* (* x (sqrt y)) (- (+ -.427924620565467e-2 z) 6.25000000000000e-1)))))

(FPCore (x y z)
:name "gsl_sf_airy_Ai_deriv_scaled"
:pre (and (and (<= -.464831530766350e1 x) (<= x -.464815984837865e1)) (and (<= 4.64815984837865e1 y) (<= y 4.64831530766350e1)) (and (<= 1.12434324840067e-3 z) (<= z 1.12434339409144e-3)))
(cos (- 2.35619449019234e0 (* (* x (sqrt y)) (- (+ -.427924620565467e-2 z) 6.25000000000000e-1)))))

(FPCore (x y z)
:name "gsl_sf_airy_Bi_deriv_scaled"
:pre (and (and (<= -.316307993711694e1 x) (<= x -.316297872548622e1)) (and (<= 3.16297872548622e1 y) (<= y 3.16307993711694e1)) (and (<= 1.12118695926311e-3 z) (<= z 1.12118740161280e-3)))
(sin (- 2.35619449019234e0 (* (* x (sqrt y)) (- (+ -.427924620565467e-2 z) 6.25000000000000e-1)))))

(FPCore (x y z a b c)
:name "gsl_sf_bessel_J0"
:pre (and (and (<= -.344623893687315e-2 x) (<= x 2.36428762131644e-3)) (and (<= -.554221176923393e-1 y) (<= y -.554185841897430e-1)) (and (<= -.147267208792919e-1 z) (<= z 1.90997859955306e-2)) (and (<= -.665223007764405e-1 a) (<= a 2.48983703498281e-1)) (and (<= -.344623893687315e-2 b) (<= b 2.36428762131644e-3)) (and (<= -.665223007764405e-1 c) (<= c 2.48983703498281e-1)))
(+ (* 1.00254161968939e-1 5.00000000000000e-1) (- (* (+ (- z x) a) (/ y (- 1.00000000000000e0 -.100000000000000e0))) (+ (- (* y x) b) c))))

(FPCore (x y z a b c)
:name "gsl_sf_bessel_J1"
:pre (and (and (<= -.730451275014704e-3 x) (<= x 7.57703750302215e-2)) (and (<= -.253615218307906e-1 y) (<= y 5.01270809844696e-2)) (and (<= 1.67036883579641e0 z) (<= z 1.67056522558885e0)) (and (<= -.707063669176215e-3 a) (<= a 7.15378933626650e-2)) (and (<= -.423252493857344e-3 b) (<= b 2.33877627069644e-4)) (and (<= -.253615218307906e-1 c) (<= c 5.01270809844696e-2)))
(+ (+ (* 5.00000000000000e-1 -.117261415133328e-1) (- (* (+ x y) (/ z 2.00000000000000e0)) (+ (- a b) c))) 2.50000000000000e-1))

(FPCore (x y z a b c i j k)
:name "gsl_sf_bessel_Y0"
:pre (and (and (<= -.143125722794874e-1 x) (<= x 4.00737676011438e-2)) (and (<= -.128345237560420e-1 y) (<= y 2.36627491839697e-2)) (and (<= 1.91574046545121e0 z) (<= z 1.91587906752188e0)) (and (<= -.123200757467538e-1 a) (<= a 3.81738239917422e-2)) (and (<= -.189995632458633e-3 b) (<= b 1.99252038768402e-2)) (and (<= -.128345237560420e-1 c) (<= c 2.36627491839697e-2)) (and (<= 1.37564940408540e0 i) (<= i 1.37566710183873e0)) (and (<= -.258586306383044e-1 j) (<= j -.258586295641387e-1)) (and (<= 1.91140939673216e-1 k) (<= k 1.91144438382211e-1)))
(+ (+ (- (* (+ x y) (/ z 2.00000000000000e0)) (+ (- a b) c)) (* 5.00000000000000e-1 -.112778393928656e-2)) (+ (* (* (- i 6.93147180559945e-1) 6.36619772367581e-1) (+ (* 1.00254161968939e-1 5.00000000000000e-1) (- j k))) 3.75000000000000e-1)))

(FPCore (x y)
:name "gsl_sf_bessel_Y1"
:pre (and (and (<= 3.06182798787341e1 x) (<= x 3.06182931066625e1)) (and (<= 3.74825415273475e-1 y) (<= y 3.74825415423966e-1)))
(- (* (+ (sin x) (cos x)) (cos (/ y x))) (* (- (sin x) (cos x)) (sin (/ y x)))))

(FPCore (x)
:name "gsl_sf_bessel_j1"
:pre (and (<= 4.49340905874242e0 x) (<= x 4.49340955378834e0))
(- (/ (sin x) x) (cos x)))

(FPCore (x y z a)
:name "gsl_sf_bessel_j2"
:pre (and (and (<= 9.09500250127173e0 x) (<= x 9.09502016399957e0)) (and (<= -.180270057146886e-2 y) (<= y -.180250852201120e-2)) (and (<= -.329775459497613e-1 z) (<= z -.329757796769782e-1)) (and (<= 5.38791999527431e-2 a) (<= a 5.38849195368323e-2)))
(- (* (* (* (+ 1.00000000000000e0 y) (- z 3.23418171489487e-14)) (- 1.00000000000000e0)) (- (/ 3.00000000000000e0 (* x x)) 1.00000000000000e0)) (/ (* (* -.100000000000000e0 (- 1.00000000000000e0 a)) 3.00000000000000e0) x)))

(FPCore (x y z a b c)
:name "gsl_sf_bessel_y1"
:pre (and (and (<= 5.88928704326335e-2 x) (<= x 5.88989996690750e-2)) (and (<= 9.90221964547882e-1 y) (<= y 9.90222978090620e-1)) (and (<= 2.79837552211447e0 z) (<= z 2.79839338076820e0)) (and (<= -.165687867002557e-1 a) (<= a -.165687765420207e-1)) (and (<= 1.17785740865267e-1 b) (<= b 1.17797999338150e-1)) (and (<= -.343216980479525e-1 c) (<= c -.343199121825789e-1)))
(+ (/ (* -.100000000000000e0 (- 1.00000000000000e0 (* x y))) z) (* (* (+ 1.00000000000000e0 (* a b)) (- (- c 1.50995788317232e-7) (* 4.00000000000000e0 2.69515142907906e-15))) (- 1.00000000000000e0))))

(FPCore (x y z a b c)
:name "gsl_sf_bessel_y2_0"
:pre (and (and (<= 5.55262748578578e1 x) (<= x 5.55267103111727e1)) (and (<= 7.45159545720632e0 y) (<= y 7.45162467594636e0)) (and (<= -.267681432995431e-2 z) (<= z -.267642874522955e-2)) (and (<= -.402386176768140e-1 a) (<= a -.402356958028097e-1)) (and (<= 8.09455608368228e-2 b) (<= b 8.09573176270511e-2)) (and (<= 9.86579726743051e-1 c) (<= c 9.86581665150053e-1)))
(- (* (* (- 1.00000000000000e0) (* (+ 1.00000000000000e0 z) (- a 2.69515142907906e-14))) (/ (- 1.00000000000000e0 (/ 3.00000000000000e0 x)) y)) (* (- 1.00000000000000e0 (* b c)) (/ 3.00000000000000e0 (* y y)))))
(FPCore (x y z)
:name "gsl_sf_bessel_y2"
:pre (and (and (<= 1.04918716024301e0 x) (<= x 1.04933597006409e0)) (and (<= -.210172123383595e-4 y) (<= y 1.17364568553966e-6)) (and (<= -.751008711195847e-10 z) (<= z 1.17364568553966e-6)))
(- (* (+ (/ (- x 1.00000000000000e0) (- 1.00000000000000e0 -.100000000000000e0)) (/ (- x 1.00000000000000e0) (- 1.00000000000000e0 -.100000000000000e0))) y) z))

(FPCore (x y z a b c i)
:name "gsl_sf_clausen"
:pre (and (and (<= 0.00000000000000e-1 x) (<= x 2.13587030317617e-3)) (and (<= 4.00000000000000e-19 y) (<= y 7.23324281221258e-2)) (and (<= 1.99977577573187e0 z) (<= z 2.00000000000000e0)) (and (<= 0.00000000000000e-1 a) (<= a 2.17118891849202e-3)) (and (<= 0.00000000000000e-1 b) (<= b 3.53186153158518e-5)) (and (<= 4.00000000000000e-19 c) (<= c 7.23324281221258e-2)) (and (<= 3.14150459969160e0 i) (<= i 3.14159265358979e0)))
(- (+ (- (* (+ x y) (/ z 2.00000000000000e0)) (+ (- a b) c)) (* 5.00000000000000e-1 2.14269436376669e0)) (log i)))

(FPCore (x y z a b c i)
:name "gsl_sf_expint_Ei"
:pre (and (and (<= 3.72505453282074e-1 x) (<= x 3.72509368912535e-1)) (and (<= -.100257602673463e-2 y) (<= y 8.91927262926704e-2)) (and (<= -.130318207984970e-1 z) (<= z 4.27239860622096e-2)) (and (<= -.745018737825071e-1 a) (<= a -.745010906564147e-1)) (and (<= -.114480769764582e-2 b) (<= b 1.04558886088703e-1)) (and (<= -.142231670911190e-3 c) (<= c 1.53661597960321e-2)) (and (<= -.130318207984970e-1 i) (<= i 4.27239860622096e-2)))
(+ (+ (- (* (+ y z) (/ a 2.00000000000000e0)) (+ (- b c) i)) (* 5.00000000000000e-1 -.373902147922028e-2)) (+ (- x) (- (- (log x)) 6.87500000000000e-1))))

(FPCore (x y z a b c)
:name "gsl_sf_Chi"
:pre (and (and (<= -.409052628977823e-2 x) (<= x -.408910558106871e-2)) (and (<= 5.15404790038882e-2 y) (<= y 6.76447616418184e-2)) (and (<= -.523826510087374e-1 z) (<= z 5.23826510087374e-1)) (and (<= -.939057197219918e-2 a) (<= a -.477922159937449e-2)) (and (<= -.145446198725880e-1 b) (<= b -.115436802779264e-1)) (and (<= -.523826510087374e-1 c) (<= c 5.23826510087374e-1)))
(- (- (+ (+ y -.186951073961014e-2) (+ z x))) (+ (+ (- a b) (* 5.00000000000000e-1 -.373902147922028e-2)) (+ c x))))

(FPCore (x y z a b c i)
:name "gsl_sf_Ci"
:pre (and (and (<= -.423352662707932e-1 x) (<= x 3.95879807268537e-2)) (and (<= -.103302166401177e0 y) (<= y 1.93882226599171e-1)) (and (<= -.190499058568627e0 z) (<= z -.190496679953107e0)) (and (<= -.444758546994299e-1 a) (<= a 4.07780080438175e-2)) (and (<= -.214058842863663e-2 b) (<= b 1.19002731696382e-3)) (and (<= -.103302166401177e0 c) (<= c 1.93882226599171e-1)) (and (<= 6.16471943607261e-1 i) (<= i 6.16549107432418e-1)))
(+ (+ (- (* (+ x y) (/ z 2.00000000000000e0)) (+ (- a b) c)) (* -.340042818560554e-1 5.00000000000000e-1)) (- (log i) 5.00000000000000e-1)))

(FPCore (x)
:name "gsl_sf_legendre_P2"
:pre (and (<= 5.77345867384458e-1 x) (<= x 5.77354671764176e-1))
(- (* x (* 3.00000000000000e0 x)) 1.00000000000000e0))

(FPCore (x)
:name "gsl_sf_legendre_P3"
:pre (and (<= 7.74591586299523e-1 x) (<= x 7.74601754504323e-1))
(- (* (* 5.00000000000000e0 x) x) 3.00000000000000e0))

(FPCore (x)
:name "gsl_sf_legendre_Q1"
:pre (and (<= 8.33552679205434e-1 x) (<= x 8.33560441291075e-1))
(- (* (log (/ (+ x 1.00000000000000e0) (- 1.00000000000000e0 x))) (* x 5.00000000000000e-1)) 1.00000000000000e0))

(FPCore (x y z a b c)
:name "gsl_sf_psi"
:pre (and (and (<= -.157312109453996e1 x) (<= x -.157307665199673e1)) (and (<= 1.57307665199673e1 y) (<= y 1.57312109453996e1)) (and (<= -.102922081151124e-2 z) (<= z -.102922078901492e-2)) (and (<= -.967672979578054e-1 a) (<= a -.967671152947043e-1)) (and (<= -.112080961626516e-4 b) (<= b 2.67157110512405e-6)) (and (<= -.101801271534859e-2 c) (<= c 5.59718725387000e-5)))
(- (+ (- (log y) (/ 5.00000000000000e-1 x)) (+ (- (* z a) (+ b c)) (* 5.00000000000000e-1 -.204749044678185e-2))) (/ (* (cos (* 3.14159265358979e0 x)) 3.14159265358979e0) (sin (* 3.14159265358979e0 x)))))

(FPCore (x y z a)
:name "gsl_sf_psi_1piy"
:pre (and (and (<= 7.81021903506140e-1 x) (<= x 7.81236879903145e-1)) (and (<= 0.00000000000000e-1 y) (<= y 7.38777132065845e-1)) (and (<= 1.78102190350614e0 z) (<= z 1.25039061843995e5)) (and (<= -.384188183016679e-8 a) (<= a -.384188161439537e-8)))
(- (* (+ (+ y (/ 1.00000000000000e0 z)) (+ 1.96039994668798e-4 (* a x))) x) 5.77215664901533e-1))

(FPCore (x y)
:name "gsl_sf_lnsinh"
:pre (and (and (<= 8.81362801461877e-1 x) (<= x 8.81390001922235e-1)) (and (<= 6.59436340397167e-3 y) (<= y 6.59477799003697e-3)))
(log (* (+ (* (+ y 1.66666666666667e-1) (* x x)) 1.00000000000000e0) x)))

(FPCore (x)
:name "gsl_sf_angle_restrict_symm"
:pre (and (<= -.226194671058452e2 x) (<= x -.226194640541178e2))
(+ (+ (- (- (- x -.219911475181580e2) (* 1.50995788317232e-7 -.700000000000000e1)) (* (* -.200000000000000e0 3.50000000000000e1) 1.07806057163162e-14)) 6.28318500518799e0) 3.01991576634464e-7))

(FPCore (x)
:name "gsl_sf_zeta_0"
:pre (and (<= -.400000000000000e0 x) (<= x -.399996966182747e0))
(sin (* (fmod x 4.00000000000000e0) 1.57079632679490e0)))
(FPCore (x)
:name "gsl_sf_zeta"
:pre (and (<= -.400000000000000e0 x) (<= x -.399996966182747e0))
(floor (- 1.00000000000000e0 x)))

(FPCore (x y z a b)
:name "gsl_sf_zetam1"
:pre (and (and (<= 9.99999970194589e-1 x) (<= x 9.99999970196497e-1)) (and (<= 6.18201064888584e23 y) (<= y 6.18383747154627e23)) (and (<= 1.00333871678010e0 z) (<= z 1.00333872913456e0)) (and (<= 6.41623918478696e-4 a) (<= a 6.41732846401253e-4)) (and (<= -.628318527046686e0 b) (<= b -.628304018455889e0)))
(- (* (/ 1.00000000000000e0 x) (* (* (* y z) (/ a 9.19596621740921e15)) (/ (sin b) 3.14159265358979e0))) 1.00000000000000e0))

(FPCore (x)
:name "gsl_sf_eta_0"
:pre (and (<= -.200001788871936e0 x) (<= x -.199998211152081e0))
(sin (* (fmod x 4.00000000000000e0) 1.57079632679490e0)))
(FPCore (x)
:name "gsl_sf_eta"
:pre (and (<= -.200001788871936e0 x) (<= x -.199998211152081e0))
(floor (- 1.00000000000000e0 x)))

